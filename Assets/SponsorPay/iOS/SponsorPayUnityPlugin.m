#import "SponsorPayUnityPlugin.h"
#import "SPURLGenerator.h"
#import "SPActionIdValidator.h"
#import "SPCredentials.h"

#pragma mark - Plugin wrapper state

static NSString *lastCredentialsToken = nil;
static NSString *callbackGameObjectName = nil;

#pragma mark - Plugin constants

static char* OFW_RESULT_UNITY_CALLBACK_METHOD_NAME = "OnSPOfferWallResultFromSDK";
static char* VCS_UNITY_CALLBACK_METHOD_NAME = "OnSPCurrencyDeltaOfCoinsMessageFromSDK";
static char* MBE_RESULT_UNITY_CALLBACK_METHOD_NAME = "OnSPBrandEngageResultFromSDK";
static char* MBE_STATUS_UNITY_CALLBACK_METHOD_NAME = "OnSPBrandEngageStatusMessageFromSDK";
static char* INTERSTITIAL_RESULT_UNITY_CALLBACK_METHOD_NAME = "OnSPInterstitialResultFromSDK";
static char* INTERSTITIAL_STATUS_UNITY_CALLBACK_METHOD_NAME = "OnSPInterstitialMessageFromSDK";
static char* NATIVE_EXCEPTION_CALLBACK_METHOD_NAME = "OnExceptionFromSDK";

#pragma mark - Plugin parameters provider

@implementation SPUnityPluginParametersProvider {
    NSDictionary *_pluginParameters;
}

@synthesize pluginVersion = _pluginVersion;

- (NSDictionary *)dictionaryWithKeyValueParameters
{
    return [NSDictionary dictionaryWithDictionary:self.pluginParameters];
}

-(NSDictionary *)pluginParameters
{
    if (!_pluginParameters){
        if (!self.pluginVersion){
            self.pluginVersion = @"";
        }
        
        _pluginParameters = [[NSDictionary alloc]initWithObjectsAndKeys:
							 @"unity", @"framework",
							 self.pluginVersion, @"plugin_version",
							 nil];
    }
    return _pluginParameters;
}

-(void)dealloc
{
    self.pluginVersion = nil;
}

@end

#pragma mark - String convenience functions

NSString *asNSString(const char *cString)
{
    if( cString == NULL) {
        return @"";
    }
    NSString *s = [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
    return s ? s : @"";
}

char* cStringCopy(const char* string)
{
    if (string == NULL)
        return NULL;
    
    char* res = (char*)malloc(strlen(string) + 1);
    strcpy(res, string);
    
    return res;
}

#pragma mark - Callbacks

void _SPSetCallbackGameObjectName(const char* name)
{
    @autoreleasepool {
        callbackGameObjectName = asNSString(name);
    }
}

void sendMessageToUnitySide(const char *methodName, const char *message)
{
    if (callbackGameObjectName) {
        UnitySendMessage([callbackGameObjectName UTF8String], methodName, message);
    } else {
        NSLog(@"SponsorPayPlugin error! The callback game object name was not specified.");
    }
}

void sendDictionaryToUnity(const char *methodName, NSDictionary* dict)
{
    NSError *error = nil;
    //convert object to data
    NSData* jsonData = [NSJSONSerialization dataWithJSONObject:dict
                                                       options:NSJSONWritingPrettyPrinted
                                                         error:&error];
	
    NSString* json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    
    sendMessageToUnitySide(methodName, json.UTF8String);
    
    error = nil;
    json = nil;
}



#pragma mark - Start SDK

const char* _SPStartSDK(const char* appId, const char* userId, const char*securityToken)
{
    @autoreleasepool {
        NSString* nsUserId = asNSString(userId);
        if(![nsUserId isEqualToString:@""])
        {
            lastCredentialsToken = [SponsorPaySDK startForAppId:asNSString(appId)
                                                         userId:nsUserId
                                                  securityToken:asNSString(securityToken)];
        }
        else
        {
            lastCredentialsToken = [SponsorPaySDK startWithAutogeneratedUserForAppId:asNSString(appId)
                                                                       securityToken:asNSString(securityToken)];
        }
    }
    return cStringCopy([lastCredentialsToken UTF8String]);
}

void setCurrencyName(const char* currencyName)
{
    [SponsorPaySDK setCurrencyName:asNSString(currencyName) forCredentials:lastCredentialsToken];
}


void checkCredentialsAndInvokeWithCurrency(const char* credentialsToken, const char* currency, void (^block)(NSString *token))
{
    NSString *credToken = asNSString(credentialsToken);
    if ([credToken isEqualToString:@""]) {
        if ( lastCredentialsToken == nil) {
            sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                [@"The SDK was not started yet.You have to execute SponsorPay.start method first" UTF8String]);
            return;
        }
        credToken = lastCredentialsToken;
    } else {
        if(![SponsorPaySDK isCredentialsTokenValid:credToken]) {
            sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                   [@"The provided token is not valid. Please execute SponsorPay.start" UTF8String]);
            return;
        }
    }
    if (currency) {
        setCurrencyName(currency);
    }
    dispatch_async(dispatch_get_main_queue(), ^{block(credToken);});
}

void checkCredentialsAndInvoke(const char* credentialsToken, void (^block)(NSString *token))
{
    checkCredentialsAndInvokeWithCurrency(credentialsToken, nil, block);
}

#pragma mark - OfferWall

@implementation SPUnityOfferWallDelegate

- (void)offerWallViewController:(SPOfferWallViewController *)offerWallVC
           isFinishedWithStatus:(int)status
{
    dispatch_async(dispatch_get_main_queue(), ^{
        self.offerWallVC = nil;
    });
    sendMessageToUnitySide(OFW_RESULT_UNITY_CALLBACK_METHOD_NAME,
                           [[NSString stringWithFormat:@"%i", status] UTF8String]);
}

- (BOOL)isWaiting
{
    return self.offerWallVC != nil;
}

+ (SPUnityOfferWallDelegate *)instance
{
    static SPUnityOfferWallDelegate *instance = nil;
    if (!instance){
        instance = [[SPUnityOfferWallDelegate alloc] init];
    }
    return instance;
}

@end

void _SPLaunchOfferWall(const char* credentialsToken, const char* currencyName)
{
    @autoreleasepool {
        checkCredentialsAndInvokeWithCurrency(credentialsToken, currencyName, ^(NSString* token){
            SPOfferWallViewController *ofw = [SponsorPaySDK offerWallViewControllerForCredentials:token];
            ofw.shouldFinishOnRedirect = YES;
            UIViewController *vc = [[[UIApplication sharedApplication] keyWindow] rootViewController];
            SPUnityOfferWallDelegate *delegate = [SPUnityOfferWallDelegate instance];
            delegate.offerWallVC = ofw;
            ofw.delegate = delegate;
            [ofw showOfferWallWithParentViewController:vc];
        });
    }
}

#pragma mark - VCS

@implementation SPUnityVCSDelegate

- (void)virtualCurrencyConnector:(SPVirtualCurrencyServerConnector *)connector
  didReceiveDeltaOfCoinsResponse:(double)deltaOfCoins
             latestTransactionId:(NSString *)transactionId
{
    //build an info object and convert to json
    
    NSDictionary* transaction = [NSDictionary dictionaryWithObjectsAndKeys:
                                 [NSNumber numberWithDouble: deltaOfCoins], @"deltaOfCoins",
                                 transactionId, @"ltid", nil];
    
    
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:YES], @"success",
                          transaction, @"transaction", nil];
    
    
    sendDictionaryToUnity(VCS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)virtualCurrencyConnector:(SPVirtualCurrencyServerConnector *)connector
                 failedWithError:(SPVirtualCurrencyRequestErrorType)errorType
                       errorCode:(NSString *)errorCode
                    errorMessage:(NSString *)errorMessage
{
    NSDictionary* jsonError = [NSDictionary dictionaryWithObjectsAndKeys:
                               [self getErrorTypeString:errorType], @"Type",
                               errorCode, @"Code",
                               errorMessage, @"Message", nil];
    
    
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:NO], @"success",
                          jsonError,  @"error", nil];
    
    sendDictionaryToUnity(VCS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (NSString*) getErrorTypeString:(SPVirtualCurrencyRequestErrorType)errorType
{
    NSString* errorTypeString;
    switch (errorType) {
        case NO_ERROR:
            errorTypeString = @"NO_ERROR";
            break;
        case ERROR_NO_INTERNET_CONNECTION:
            errorTypeString = @"ERROR_NO_INTERNET_CONNECTION";
            break;
        case ERROR_INVALID_RESPONSE:
            errorTypeString = @"ERROR_INVALID_RESPONSE";
            break;
        case ERROR_INVALID_RESPONSE_SIGNATURE:
            errorTypeString = @"ERROR_INVALID_RESPONSE_SIGNATURE";
            break;
        case SERVER_RETURNED_ERROR:
            errorTypeString = @"SERVER_RETURNED_ERROR";
            break;
        case ERROR_OTHER:
            errorTypeString = @"ERROR_OTHER";
            break;
        default:
            break;
    }
    return errorTypeString;
}

+ (SPUnityVCSDelegate *)instance
{
    static SPUnityVCSDelegate *instance = nil;
    
    if (!instance){
        instance = [[SPUnityVCSDelegate alloc] init];
    }
	
    return instance;
}

@end

void _SPSetShouldShowNotificationOnVCSCoins(int should)
{
    @autoreleasepool { // Arguably not necessary but defensive
        checkCredentialsAndInvoke(nil, ^(NSString* token){
            [SponsorPaySDK setShowPayoffNotificationOnVirtualCoinsReceived:(BOOL)should
                                                            forCredentials:token];
        });
    }
}

void _SPSendDeltaOfCoinsRequest(const char* credentialsToken)
{
    @autoreleasepool {
        checkCredentialsAndInvoke(credentialsToken, ^(NSString* token){
            SPVirtualCurrencyServerConnector *vcs = [SponsorPaySDK VCSConnectorForCredentials:token];
            vcs.delegate = [SPUnityVCSDelegate instance];
            [vcs fetchDeltaOfCoins];
        });
    }
}


#pragma mark - Brand Engage

@implementation SPUnityMBEDelegate

- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
         didReceiveOffers:(BOOL)areOffersAvailable
{
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:YES], @"success",
                          [NSNumber numberWithBool:areOffersAvailable],  @"offersAvailable", nil];
    
    
    sendDictionaryToUnity(MBE_STATUS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
          didChangeStatus:(SPBrandEngageClientStatus)newStatus
{
    if (newStatus == ERROR){
        NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                              [NSNumber numberWithBool:NO], @"success",
                              @"",  @"error", nil];
        
        sendDictionaryToUnity(MBE_RESULT_UNITY_CALLBACK_METHOD_NAME, info);
    } else if (newStatus == CLOSE_FINISHED && self.shouldQueryVCS) {
        NSString *token = [SPCredentials credentialsTokenForAppId:brandEngageClient.appId userId:brandEngageClient.userId];
        _SPSendDeltaOfCoinsRequest([token UTF8String]);
    }
    
    if (newStatus != STARTED){
        sendMessageToUnitySide(MBE_RESULT_UNITY_CALLBACK_METHOD_NAME, [[self getMBEStatusString:newStatus] UTF8String]);
    }
}

- (NSString*) getMBEStatusString:(SPBrandEngageClientStatus)status
{
    NSString* statusString;
    switch (status) {
        case ERROR:
            statusString = @"ERROR";
            break;
        case CLOSE_FINISHED:
            statusString = @"CLOSE_FINISHED";
            break;
        case CLOSE_ABORTED:
        default:
            statusString = @"CLOSE_ABORTED";
            break;
    }
    return statusString;
}

+ (SPUnityMBEDelegate *)instance
{
    static SPUnityMBEDelegate *instance = nil;
    
    if (!instance) {
        instance = [[SPUnityMBEDelegate alloc] init];
	}
    
    return instance;
}

@end

void _SPRequestBrandEngageOffers(const char* credentialsToken, const char* currencyName, int queryVCS)
{
    @autoreleasepool {
        checkCredentialsAndInvokeWithCurrency(credentialsToken, currencyName, ^(NSString* token){
            SPBrandEngageClient *mbe = [SponsorPaySDK brandEngageClientForCredentials:token];
            SPUnityMBEDelegate *delegate = [SPUnityMBEDelegate instance];
            delegate.shouldQueryVCS = (BOOL)queryVCS;
            delegate.mbeToken = token;
            mbe.delegate = delegate;
            [mbe requestOffers];
        });
    }
}

void _SPStartBrandEngage()
{
    @autoreleasepool {
        checkCredentialsAndInvoke([[SPUnityMBEDelegate instance].mbeToken UTF8String], ^void(NSString *token){
            SPBrandEngageClient *mbe = [SponsorPaySDK brandEngageClientForCredentials:token];
            UIViewController *vc = [[[UIApplication sharedApplication] keyWindow] rootViewController];
            [mbe startWithParentViewController:vc];
        });
    }
}

void _SPSetShouldShowBrandEngageRewardNotification(int should)
{
    @autoreleasepool {
        checkCredentialsAndInvoke(nil, ^(NSString* token){
            SPBrandEngageClient *mbe = [SponsorPaySDK brandEngageClientForCredentials:token];
            mbe.shouldShowRewardNotificationOnEngagementCompleted = should ? YES : NO;
        });
    }
}

#pragma mark - Interstitials

@implementation SPUnityInterstitialDelegate

- (void)interstitialClient:(SPInterstitialClient *)client canShowInterstitial:(BOOL)canShowInterstitial
{
    //fire notification offers available
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:YES], @"success",
                          [NSNumber numberWithBool:canShowInterstitial],  @"adsAvailable", nil];
    
    
    sendDictionaryToUnity(INTERSTITIAL_STATUS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)interstitialClient:(SPInterstitialClient *)client didDismissInterstitialWithReason:(SPInterstitialDismissReason)dismissReason
{
    //fire notification with dissmiss reason
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:YES], @"success",
                          [self getInterstitialDismissReason:dismissReason],  @"closeReason", nil];
    
    
    sendDictionaryToUnity(INTERSTITIAL_RESULT_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)interstitialClient:(SPInterstitialClient *)client didFailWithError:(NSError *)error
{
    //fire notification with dissmiss reason
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:NO], @"success",
                          [error localizedDescription],  @"error", nil];
    
    
    sendDictionaryToUnity(INTERSTITIAL_RESULT_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)interstitialClientDidShowInterstitial:(SPInterstitialClient *)client
{
    // do nothing
}


- (NSString*) getInterstitialDismissReason:(SPInterstitialDismissReason)reason
{
    NSString* reasonString;
    switch (reason) {
        case SPInterstitialDismissReasonUnknown:
            reasonString = @"ReasonUnknown";
            break;
        case SPInterstitialDismissReasonUserClickedOnAd:
            reasonString = @"ReasonUserClickedOnAd";
            break;
        case SPInterstitialDismissReasonUserClosedAd:
        default:
            reasonString = @"ReasonUserClosedAd";
            break;
    }
    return reasonString;
}

+ (SPUnityInterstitialDelegate *)instance
{
    static SPUnityInterstitialDelegate *instance = nil;
    
    if (!instance) {
        instance = [[SPUnityInterstitialDelegate alloc] init];
	}
    
    return instance;
}

@end

void _SPRequestIntersitialAds(const char* credentialsToken)
{
    @autoreleasepool {
        checkCredentialsAndInvoke(credentialsToken, ^(NSString* token){
            // this is actually not required...
            SPInterstitialClient *interstitialClient = [SponsorPaySDK interstitialClient];
            interstitialClient.delegate = [SPUnityInterstitialDelegate instance];
            [interstitialClient checkInterstitialAvailable];
        });
    }
}

void _SPShowInterstitialAd()
{
    @autoreleasepool {
        checkCredentialsAndInvoke(nil, ^(NSString* token){
            // this is actually not required...
            SPInterstitialClient *interstitialClient = [SponsorPaySDK interstitialClient];
            UIViewController *vc = [[[UIApplication sharedApplication] keyWindow] rootViewController];
            [interstitialClient showInterstitialFromViewController:vc];
        });
    }
}

#pragma mark - Rewarded Actions

void _SPReportActionCompletion(const char* credentialsToken, const char* name)
{
    @autoreleasepool {
        NSString* actionId = asNSString(name);
        checkCredentialsAndInvoke(credentialsToken, ^(NSString* token){
            NSString *exceptionReason = nil;
            if (![SPActionIdValidator validate:actionId
                              reasonForInvalid:&exceptionReason]){
                sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                       [exceptionReason UTF8String]);
                exceptionReason = nil;
                return;
            }
            [SponsorPaySDK reportActionCompleted:actionId
                                  forCredentials:token];
        });
    }
}

#pragma mark - Logging

void _SPEnableLogging(int should)
{
    if (should) {
        [SPLogger addLogger:[SPSystemLogger logger]];
    } else {
        [SPLogger removeLogger:[SPSystemLogger logger]];
    }
}

#pragma mark - Plugin parameters provider

@implementation SPPluginParametersProvider

static SPPluginParametersProvider *instance = nil;

- (NSDictionary *)dictionaryWithKeyValueParameters
{
    return [NSDictionary dictionaryWithDictionary:self.pluginParameters];
}


-(void)addParameters:(NSString*)json
{
    NSError *error;
    NSData *data = [json dataUsingEncoding:NSUTF8StringEncoding];
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data
                                                         options:kNilOptions
                                                           error:&error];
    if(!error) {
        self.pluginParameters = [NSDictionary  dictionaryWithDictionary:dict];
    }
    
}

-(void) clearParameters
{
    self.pluginParameters = nil;
}

+ (SPPluginParametersProvider *)instance
{
    if (!instance){
        instance = [[SPPluginParametersProvider alloc] init];
        [SPURLGenerator setGlobalCustomParametersProvider:instance];
    }
    return instance;
}


@end

void _SPAddParameters(const char* json)
{
    @autoreleasepool {
        NSString* nsJSON = asNSString(json);
        if(![nsJSON isEqualToString:@""])
        {
            [[SPPluginParametersProvider instance]addParameters:nsJSON];
        }
    }
}

void _SPClearParameters()
{
    [[SPPluginParametersProvider instance] clearParameters];
}

#pragma mark -

void _SPSetPluginVersion(const char* pluginVersion)
{
    @autoreleasepool {
        SPUnityPluginParametersProvider *p =
		[[SPUnityPluginParametersProvider alloc] init];
        p.pluginVersion = asNSString(pluginVersion);
        [SPURLGenerator setGlobalCustomParametersProvider:p];
    }
}



